;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''
An export method producing for GDML.

http://lcgapp.cern.ch/project/simu/framework/GDML/doc/GDMLmanual.pdf
http://gdml1.web.cern.ch/gdml1/doc/g4gdml_howto.html
http://geant4.in2p3.fr/2007/prog/GiovanniSantin/GSantin_Geant4_Paris07_Materials_v08.pdf

http://lxml.de/tutorial.html
http://lxml.de/objectify.html
http://stackoverflow.com/questions/2850823/multiple-xml-namespaces-in-tag-with-lxml

'''" code nil nil [23 424])
            ("os" include nil nil [426 435])
            ("schema_dir" variable nil nil [437 499])
            ("schema_file" variable nil nil [500 550])
            ("lxml" include nil nil [552 574])
            ("gegede" include nil nil [575 602])
            ("gegede.iter" include nil nil [603 636])
            ("gegede.export" include nil nil [637 666])
            ("qtus" function (:arguments 
              ( ("q" variable nil (reparse-symbol function_parameters) [677 678])
                ("unit" variable nil (reparse-symbol function_parameters) [679 683]))              ) nil [668 753])
            ("nt_qunit2xmldict" function (:arguments 
              ( ("nt" variable nil (reparse-symbol function_parameters) [775 777])
                ("unit" variable nil (reparse-symbol function_parameters) [779 783]))              ) nil [754 992])
            ("D" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [999 1002]))              ) nil [993 1054])
            ("Atom" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1063 1066]))              ) nil [1054 1114])
            ("Symbol" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1125 1128]))              ) nil [1114 1159])
            ("T" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1165 1168]))              ) nil [1159 1224])
            ("P" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1230 1233]))              ) nil [1224 1288])
            ("make_material_node" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1871 1874]))              ) nil [1848 3583])
            ("make_shape_node" function (:arguments 
              ( ("shape" variable nil (reparse-symbol function_parameters) [3605 3610]))              ) nil [3585 6122])
            ("make_volume_node" function (:arguments 
              ( ("vol" variable nil (reparse-symbol function_parameters) [6144 6147])
                ("store" variable nil (reparse-symbol function_parameters) [6149 6154]))              ) nil [6123 7269])
            ("convert" function (:arguments 
              ( ("geom" variable nil (reparse-symbol function_parameters) [7283 7287]))              ) nil [7271 9830])
            ("validate" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [9845 9849]))              ) nil [9832 10264])
            ("validate_object" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [10285 10288]))              ) nil [10265 10323])
            ("dumps" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [10390 10393]))              ) nil [10380 10761])
            ("output" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [10773 10776])
                ("filename" variable nil (reparse-symbol function_parameters) [10778 10786]))              ) nil [10762 10863]))          
      :file "__init__.py"
      :pointmax 10863
      :fsize 10862
      :lastmodtime '(24855 50848 227855 121000)
      :unmatched-syntax nil))
  :file "!Users!aranborkum!ggdvenv!lib!python2.7!site-packages!gegede!export!gdml!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
